#include <stack>
void dfs(int node,vector<int>adj[],vector<int>&vis,stack<int>&st){
    vis[node]=1;
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it,adj,vis,st);
        }
    }
    st.push(node);
}
void dfs1(int node,vector<int>adj[],vector<int>&vis,vector<int>&temp){
    vis[node]=1;
    temp.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs1(it,adj,vis,temp);
        }
    }
    //st.push(node);
}


vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    vector<int>adj[n];
    for(auto it:edges){
        adj[it[0]].push_back(it[1]);
        //adj[it[1]].push_back(it[0]);
    }
    vector<int>vis(n,0);
    stack<int>st;
    for(int i=0;i<n;i++){
        if(!vis[i]){
            dfs(i,adj,vis,st);
        }
    }
    //reverse the graph-->
    vector<int>adjt[n];
    for(int i=0;i<n;i++){
        vis[i]=0;
        for(auto it:adj[i]){
            adjt[it].push_back(i);
        }
    }

    vector<vector<int>>ans;
    while(!st.empty()){
        int node=st.top();
        st.pop();
        if(!vis[node]){
            vector<int>temp;
            dfs1(node,adjt,vis,temp);
            ans.push_back(temp);
        }
    }
    return ans;

}
