class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        //try to do binary search on smaller size array
        if(nums2.size()<nums1.size()) return findMedianSortedArrays(nums2,nums1);
        int n1=nums1.size();
        int n2=nums2.size();
        int low=0;
        int high=n1;
        while(low<=high){
            int cut1=(low+high)/2; //picking up cut1 elements from 1st array for the left half 
            int cut2=(n1+n2+1)/2-cut1;//picking up remaining elements from 2nd array for the left half and the +1 is to handle odd length 
            int l1=INT_MIN;
            if(cut1!=0){
                l1=nums1[cut1-1];
            }
            int l2=INT_MIN;
            if(cut2!=0){
                l2=nums2[cut2-1];
            }
            int r1=INT_MAX;
            if(cut1!=n1){
                r1=nums1[cut1];
            }
            int r2=INT_MAX;
            if(cut2!=n2){
                r2=nums2[cut2];
            }

            if(l1<=r2 and l2<=r1){
                if((n1+n2)%2==0){
                    return (max(l1,l2)+min(r1,r2))/2.0;
                }
                else{
                    return max(l1,l2);
                }
            }
            else if(l1>r2){
                high=cut1-1;
            }
            else{
                low=cut1+1;
            }
        }
        return 0.0;
    }
};
