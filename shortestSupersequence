#include <bits/stdc++.h> 

int func(int i, int j, string s, string t, vector<vector<int>>& dp) {
    if (i < 0 || j < 0) return 0;
    if (dp[i][j] != -1) return dp[i][j];
    
    int match = 0;
    if (s[i] == t[j]) {
        match = 1 + func(i - 1, j - 1, s, t, dp);
    }
    int notmatch = func(i - 1, j, s, t, dp);
    int nm = func(i, j - 1, s, t, dp);
    
    return dp[i][j] = max(match, max(notmatch, nm));
}

int lcs(string s, string t) {
    int n = s.size();
    int m = t.size();
    vector<vector<int>> dp(n, vector<int>(m, -1));
    return func(n - 1, m - 1, s, t, dp);
}

string shortestSupersequence(string a, string b)
{
	int n = a.size();
    int m = b.size();
    
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                dp[i][j] = 0;
            } else if (a[i - 1] == b[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

	int i=n,j=m;
	string ans;
	while(i>0 and j>0){
		if(a[i-1]!=b[j-1]){
			if(dp[i-1][j]>dp[i][j-1]){
				ans.push_back(a[i-1]);
				i--;
			}
			else{
				ans.push_back(b[j-1]);
				j--;
			}
		}
		else{
			ans.push_back(a[i-1]);
			i--;
			j--;
		}
	}
	while(i>0){
		ans.push_back(a[i-1]);
		i--;
	}
	while(j>0){
		ans.push_back(b[j-1]);
		j--;
	}
	reverse(ans.begin(),ans.end());
	return ans;

}
