/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        // unordered_map<Node*,Node*>mp;
        // mp[NULL]=NULL;
        // Node*temp=head;
        // while(temp!=NULL){
        //     Node* newnode=new Node(temp->val);
        //     mp[temp]=newnode;
        //     temp=temp->next;
        // }
        // temp=head;
        // while(temp!=NULL){
        //     Node*next=temp->next;
        //     Node*random=temp->random;
        //     mp[temp]->next=mp[next];
        //     mp[temp]->random=mp[random];
        //     temp=temp->next;
        // }
        // return mp[head];

        //optimised approach-->>

        //step 1 create deep copy nodes just next to the give nodes-->.
        Node*iter=head;
        Node*front=head;
        while(iter!=NULL){
            front=iter->next;
            Node*copy=new Node(iter->val);
            iter->next=copy;
            copy->next=front;
            iter=front;
        }

        //step 2 connect random nodes in the created deep copy linked list-->>
        iter=head;
        while (iter != NULL) {
           if(iter->random != NULL) {
            iter->next->random = iter->random->next;
           }
        iter = iter->next->next;
        }
        //step 3 create original linked list and deep copy linked list-->>
        iter = head;
          Node *pseudoHead = new Node(0);
          Node *copy = pseudoHead;

          while (iter != NULL) {
            front = iter->next->next;

            // extract the copy
            copy->next = iter->next;

            // restore the original list
            iter->next = front;
              
            copy = copy -> next; 
            iter = front;
          }

          return pseudoHead->next;
        
    }
};
