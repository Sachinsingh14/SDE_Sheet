#include <bits/stdc++.h> 
class Disjointset
{
private:
    vector<int> rank, parent, size;

public:
    Disjointset(int n)
    {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findpar(int node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findpar(parent[node]);
    }

    void unionbyrank(int u, int v)
    {
        int up_u = findpar(u);
        int up_v = findpar(v);
        if (up_u == up_v)
            return;
        if (rank[up_u] < rank[up_v])
        {
            parent[up_u] = up_v;
        }
        else if (rank[up_u] > rank[up_v])
        {
            parent[up_v] = up_u;
        }
        else
        {
            parent[up_v] = up_u;
            rank[up_u]++;
        }
    }
    void unionbysize(int u, int v)
    {
        int up_u = findpar(u);
        int up_v = findpar(v);
        if (up_u == up_v)
            return;
        if (size[up_u] < size[up_v])
        {
            parent[up_u] = up_v;
            size[up_v] += size[up_u];
        }
        else
        {
            parent[up_v] = up_u;
            size[up_u] += size[up_v];
        }
    }
};
int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	
	vector<pair<int,pair<int,int>>>edges;
	for(auto it:graph){
		int u=it[0];
		int v=it[1];
		int wt=it[2];
		edges.push_back({wt,{u,v}});
	}
	sort(edges.begin(),edges.end());
	Disjointset ds(n);
	int ans=0;
	for(auto it:edges){
		int u=it.second.first;
		int v=it.second.second;
		int wt=it.first;
		if(ds.findpar(u)!=ds.findpar(v)){
			ans+=wt;
			ds.unionbyrank(u,v);
		}
	}
	return ans;

}
