#include <queue>
bool bfs(int src,vector<int>adj[],vector<int>&col){
	queue<int>q;
	q.push(src);
	col[src]=0;
	while(!q.empty()){
		int node=q.front();
		q.pop();
		for(auto it:adj[node]){
			if(col[it]!=-1){
				if(col[it]==col[node]) return false;
			}
			else{
				col[it]=!col[node];
				q.push(it);
			}
		}
	}
	return true;

}



bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n=edges.size();
	int m=edges[0].size();
	vector<int>adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(edges[i][j]==1){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	vector<int>col(n,-1);
	for(int i=0;i<n;i++){
		if(col[i]==-1){
			if(bfs(i,adj,col)==false) return false;
		}
	}
	return true;
}
